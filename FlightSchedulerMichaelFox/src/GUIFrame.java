
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;

public class GUIFrame extends javax.swing.JFrame {
    /**
     * Creates new form GUIFrame
     */
    public GUIFrame() {
        
        super("Flight Scheduler");
        
        initComponents();
        
        //calls methods to pull existing customers, flights, and dates from databases
        ResultSet rsCust = customer.getCustomers();
        ResultSet rsFlights = flight.getFlights();
        ResultSet rsDates = day.getDates();
        
        //adds existing customers to the combobox
        try{
            while (rsCust.next()){
                String name = rsCust.getString("Name");
                comboCust.addItem(name);
            }
        }
        catch (Exception e){
             System.out.println("If this prints, something is really wrong.");
        }
        
        //adds existing flights to the comboboxes
        try{
            while (rsFlights.next()){
                String flight = rsFlights.getString("Name");
                comboFlight.addItem(flight);
                comboFlightStat.addItem(flight);
            }
        }
        catch (Exception e){
            System.out.println("If this prints, something is really wrong.");
        }
        
        //adds existing dates to the comboboxes
        try{
            while (rsDates.next()){
                String day = rsDates.getString("Date");
                comboDay.addItem(day);
                comboDayStat.addItem(day);
                comboWaitDate.addItem(day);
            }
        }
        catch(Exception e){
            System.out.println("If this prints, something is really wrong.");
        }
    }
    
    //creates the necessary objects for performing sql commands
    Connection con = DBConnect.getConnection();
    Customer customer = new Customer(con);
    Flight flight = new Flight(con);
    Day day = new Day(con);
    Booking booking = new Booking(con);
    Waitlist waitlist = new Waitlist(con);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labFS = new javax.swing.JLabel();
        tabBook = new javax.swing.JTabbedPane();
        panCust = new javax.swing.JPanel();
        labCusNam = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        butCust = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaCust = new javax.swing.JTextArea();
        panBook = new javax.swing.JPanel();
        comboCust = new javax.swing.JComboBox<>();
        comboDay = new javax.swing.JComboBox<>();
        comboFlight = new javax.swing.JComboBox<>();
        labCust = new javax.swing.JLabel();
        labDay = new javax.swing.JLabel();
        labFlight = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaBook = new javax.swing.JTextArea();
        butBook = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboFlightStat = new javax.swing.JComboBox<>();
        comboDayStat = new javax.swing.JComboBox<>();
        comboWaitDate = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        butStatFlight = new javax.swing.JButton();
        butStatWait = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtaStat = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labFS.setFont(new java.awt.Font("Javanese Text", 1, 24)); // NOI18N
        labFS.setText("Flight Scheduler");

        labCusNam.setText("Customer Name:");

        butCust.setText("Add");
        butCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCustActionPerformed(evt);
            }
        });

        txtaCust.setEditable(false);
        txtaCust.setColumns(20);
        txtaCust.setRows(5);
        jScrollPane1.setViewportView(txtaCust);

        javax.swing.GroupLayout panCustLayout = new javax.swing.GroupLayout(panCust);
        panCust.setLayout(panCustLayout);
        panCustLayout.setHorizontalGroup(
            panCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(panCustLayout.createSequentialGroup()
                .addGroup(panCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCustLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labCusNam)
                        .addGap(18, 18, 18)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panCustLayout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(butCust, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        panCustLayout.setVerticalGroup(
            panCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCustLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(panCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labCusNam, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(butCust, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );

        tabBook.addTab("Add Customer", panCust);

        labCust.setText("Customer");

        labDay.setText("Day");

        labFlight.setText("Flight");

        txtaBook.setEditable(false);
        txtaBook.setColumns(20);
        txtaBook.setRows(5);
        jScrollPane2.setViewportView(txtaBook);

        butBook.setText("Book");
        butBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panBookLayout = new javax.swing.GroupLayout(panBook);
        panBook.setLayout(panBookLayout);
        panBookLayout.setHorizontalGroup(
            panBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panBookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labFlight)
                    .addComponent(comboFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCust, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labCust)
                    .addComponent(labDay)
                    .addGroup(panBookLayout.createSequentialGroup()
                        .addComponent(comboDay, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(butBook, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        panBookLayout.setVerticalGroup(
            panBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panBookLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labCust)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labDay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butBook, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(labFlight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabBook.addTab("Booking", panBook);

        jLabel1.setText("Check Flight Status");

        jLabel2.setText("Check Waitlist Status");

        comboDayStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDayStatActionPerformed(evt);
            }
        });

        jLabel3.setText("Flight");

        jLabel4.setText("Day");

        jLabel5.setText("Waitlist");

        butStatFlight.setText("Status");
        butStatFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStatFlightActionPerformed(evt);
            }
        });

        butStatWait.setText("Status");
        butStatWait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butStatWaitActionPerformed(evt);
            }
        });

        txtaStat.setEditable(false);
        txtaStat.setColumns(20);
        txtaStat.setRows(5);
        jScrollPane3.setViewportView(txtaStat);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(comboFlightStat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(comboDayStat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(comboWaitDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butStatWait, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butStatFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFlightStat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDayStat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butStatFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboWaitDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(butStatWait, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabBook.addTab("Status", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabBook)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labFS)
                .addGap(101, 101, 101))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labFS)
                .addGap(18, 18, 18)
                .addComponent(tabBook)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCustActionPerformed

        if ("".equals(txtName.getText())){
            txtaCust.setText("Enter a name in the text field.");
        }
        else{
            String name = txtName.getText();
            customer.addCustomer(name);
            txtName.setText("");
            txtaCust.setText("Customer "+name+" was added successfully!");
            comboCust.addItem(name);
        }
    }//GEN-LAST:event_butCustActionPerformed

    
    //this was created accidentally and I can't make it go away
    private void comboDayStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDayStatActionPerformed
    }//GEN-LAST:event_comboDayStatActionPerformed

    private void butBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBookActionPerformed
        //test to make sure all fields have an input (name could be empty if no customers have been added yet)
        if(comboCust.getSelectedItem() == null || comboFlight.getSelectedItem() == null || comboDay.getSelectedItem() == null){
            txtaBook.setText("Be sure to fill out all fields!");
        }
        else{
            //create variables to store each input
            String nameIn = (String) comboCust.getSelectedItem();
            String flightIn = (String) comboFlight.getSelectedItem();
            String dateIn = (String) comboDay.getSelectedItem();
            
            //Datetime stuff is weird in java, this code is needed to convert String type to sql Date type
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date parsed = null;
            try{
            parsed = format.parse(dateIn);
            }
            catch (Exception e){
                txtaBook.setText("Parse Fail");
            }
            Date sqlDate = new Date(parsed.getTime());
            
            //a few integers needed to check for possible exceptions such as customers already having a flight on a day or seats being full
            int seats = 0;
            int i = 0;
            int nameCheck = 0;
            int waitNameCheck = 0;
            
            //checking the bookings database to see if a person is already scheduled for the given date
            try{
                PreparedStatement nameDateCheck = con.prepareStatement("select * from bookings where customer = ? and day = ?");
                nameDateCheck.setString(1, nameIn);
                nameDateCheck.setDate(2,sqlDate);
                ResultSet rsNameDate = nameDateCheck.executeQuery();
                while (rsNameDate.next()){
                    nameCheck++;
                } 
                PreparedStatement waitNameDateCheck = con.prepareStatement("select * from waitlist where customer = ? and day = ?");
                waitNameDateCheck.setString(1, nameIn);
                waitNameDateCheck.setDate(2,sqlDate);
                rsNameDate = waitNameDateCheck.executeQuery();
                while (rsNameDate.next()){
                    waitNameCheck++;
                }
            }
            catch (Exception e){
                txtaBook.setText("Person Check Fail");
            }
            
            //if the person is already scheduled for that day, the process ends here
            if (nameCheck != 0){
                txtaBook.setText(nameIn + " already has a flight scheduled for " + dateIn + ".");
            }
            
            //if the person is already listed on a waitlist for that day, the process ends here
            else if (waitNameCheck != 0){
                txtaBook.setText(nameIn +" is already listed on a waitlist for "+ dateIn + ".");
            }
            
            //else we move to the next check
            else{
                
                //check how many seats are provided for a given flight
                try{
                PreparedStatement seatCheck = con.prepareStatement("select seats from flight where name = ?");
                seatCheck.setString(1, flightIn);
                ResultSet rsSeat = seatCheck.executeQuery();
                while (rsSeat.next()){
                    seats = rsSeat.getInt("seats");
                    }
                }
                catch(Exception e){
                    txtaBook.setText("Seats Fail");
                }
                
                //check how many people have booked the given flight for the given day
                try{
                    PreparedStatement checker = con.prepareStatement("select * from bookings where flight = ? and day = ?");
                    checker.setString(1, flightIn);
                    checker.setDate(2, sqlDate);
                    ResultSet rsChecker = checker.executeQuery();
                    //this loop counts how many people are already booked
                    while (rsChecker.next()){
                        i++;
                    }
                }
                catch (Exception e){
                    txtaBook.setText("Selection Fail");
                }
                
                //if the number of people already booked is less than the available seats, a new booking is created
                if (i < seats){
                    booking.createNewBooking(nameIn, flightIn, sqlDate);
                    txtaBook.setText("Successfully created a booking for "+nameIn+"\non flight "+flightIn+" for the date " +dateIn+ ".");
                }
                
                //else the person is sent to the waitlist
                else{
                    waitlist.createNewWaitlist(nameIn, flightIn, sqlDate);
                    txtaBook.setText("Requested flight was full\n"+nameIn+" was added to the waitlist for the flight "+flightIn+"\ndeparting on "+dateIn+".");
                }
            }
        }
    }//GEN-LAST:event_butBookActionPerformed

    private void butStatFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStatFlightActionPerformed
        
        //make sure all comboboxes have a valid selection
        if (comboFlightStat.getSelectedItem() == null || comboDayStat.getSelectedItem() == null){
            txtaStat.setText("Be sure to fill out all fields!");
        }
        
        else{
            //date to sql conversion process
            String flight = (String) comboFlightStat.getSelectedItem();
            String date = (String) comboDayStat.getSelectedItem();
            
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date parsed = null;
            try{
                parsed = format.parse(date);
            }
            catch (Exception e){
                txtaStat.setText("Parse Fail");
            }
            Date dateStat = new Date(parsed.getTime());
            
            
            //fetch the desired resultsets
            ResultSet outputBook = booking.getStatus(flight, dateStat);
            ResultSet outputWait = waitlist.getStatus(flight, dateStat);
            
            
            //start creating the final output string
            String flightStatus = ("Flight " + flight + " has been booked for the date " + date + "\nby the following:\n\n");
            
            boolean isBookEmpty = true;
            boolean isWaitEmpty = true;
                
            //otherwise we are going to add the received data to the output string
            try{
                while (outputBook.next()){
                    String currentName = outputBook.getString("Customer");
                    Timestamp currentTimestamp = outputBook.getTimestamp("Timestamp");
                    flightStatus += (currentName + " added at " + currentTimestamp + "\n");
                    isBookEmpty = false;
                }
                if (isBookEmpty){
                    flightStatus += "Bookings is empty.\n";
                }
            }
            catch (Exception e){
                System.out.println("If this triggers, something has gone horribly wrong.");
            }
                flightStatus += ("\nThe waitlist for this flight includes:\n\n");
                try{
                    while (outputWait.next()){
                        String currentName = outputWait.getString("Customer");
                        Timestamp currentTimestamp = outputWait.getTimestamp("Timestamp");
                        flightStatus += (currentName + " added at " + currentTimestamp + "\n");
                        isWaitEmpty = false;
                    }
                    if(isWaitEmpty){
                        flightStatus += "Waitlist is empty.";
                    }
                }
                catch (Exception e){
                    System.out.println("If this triggers, something has gone horribly wrong.");
                }
                
                //then we display the final string
                txtaStat.setText(flightStatus);
        }
    }//GEN-LAST:event_butStatFlightActionPerformed

    private void butStatWaitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butStatWaitActionPerformed
        
        //first check to make sure something has been selected
        if (comboWaitDate.getSelectedItem() == null){
            txtaStat.setText("Be sure to fill out all fields!");
        }

        else{
            
            //usual date nonsense
            String date = (String) comboWaitDate.getSelectedItem();
            
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date parsed = null;
            try{
                parsed = format.parse(date);
            }
            catch (Exception e){
                txtaStat.setText("Parse Fail");
            }
            Date dateStat = new Date(parsed.getTime());
            
            //fetch the desired resultset
            ResultSet outputWait = waitlist.getStatus("", dateStat);
            
            //start creating a string for final output
            String waitStatus = ("The waitlist for " + date + " contains the following:\n\n");
            boolean isWaitEmpty = true;
            
            try{
                while (outputWait.next()){
                    String currentName = outputWait.getString("Customer");
                    String currentFlight = outputWait.getString("Flight");
                    Timestamp currentTimestamp = outputWait.getTimestamp("Timestamp");
                    isWaitEmpty = false;
                        
                    waitStatus += (currentName + " attempted to book " + currentFlight + " at " + currentTimestamp + "\n");
                }
                if (isWaitEmpty){
                    waitStatus += "Waitlist is empty.";
                }
            }
            catch (Exception e){
                System.out.println("If this triggers, something has gone horribly wrong.");
            }

            //set the text area to display the results
            txtaStat.setText(waitStatus);
        }
    }//GEN-LAST:event_butStatWaitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBook;
    private javax.swing.JButton butCust;
    private javax.swing.JButton butStatFlight;
    private javax.swing.JButton butStatWait;
    private javax.swing.JComboBox<String> comboCust;
    private javax.swing.JComboBox<String> comboDay;
    private javax.swing.JComboBox<String> comboDayStat;
    private javax.swing.JComboBox<String> comboFlight;
    private javax.swing.JComboBox<String> comboFlightStat;
    private javax.swing.JComboBox<String> comboWaitDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labCusNam;
    private javax.swing.JLabel labCust;
    private javax.swing.JLabel labDay;
    private javax.swing.JLabel labFS;
    private javax.swing.JLabel labFlight;
    private javax.swing.JPanel panBook;
    private javax.swing.JPanel panCust;
    private javax.swing.JTabbedPane tabBook;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextArea txtaBook;
    private javax.swing.JTextArea txtaCust;
    private javax.swing.JTextArea txtaStat;
    // End of variables declaration//GEN-END:variables
}
